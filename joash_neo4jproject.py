# -*- coding: utf-8 -*-
"""Joash Neo4jproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10oVEjC0J12ke2Y4CTzf8k4U5ci7_LdjR
"""

!pip install neo4j
from neo4j import GraphDatabase
import pandas as pd
import psycopg2

# Define Neo4j connection details
neo4j_uri = "neo4j+s://4abcb779.databases.neo4j.io"
neo4j_user = "neo4j"
neo4j_password = "IIk4MnSCeAu7CiODvVTNFz3NfQxWo_nOcX4InwtSp5M"
driver = GraphDatabase.driver(neo4j_uri, auth=(neo4j_user, neo4j_password))

!curl ipecho.net/plain

# Define Postgres connection details
pg_host = "104.197.77.243"
pg_database = "telcom_data"
pg_user = "postgresneo4j"
pg_password = "test"

## Define function to extract data from Neo4j and return a Pandas DataFrame
neo4j_query = """
MATCH (c:Customer)-[:HAS_SUBSCRIPTION]->(s:Subscription)-[:USES]->(sv:Service)
RETURN c.customer_id AS customer_id, s.subscription_id AS subscription_id,
       sv.service_id AS service_id, s.start_date AS start_date,
       s.end_date AS end_date, s.price AS price
"""
with driver.session() as session:
    result = session.run(neo4j_query)
    df = pd.DataFrame([r.values() for r in result], columns=result.keys())
    driver.close()

# Define function to transform data
def transform_data(df):
# Convert date fields to datetime objects
 transform_data(df)['start_date'] = pd.to_datetime(transform_data(df)['start_date'])
 transform_data(df)['end_date'] = pd.to_datetime(transform_data(df)['end_date'])
# Remove null values
 transform_data(df).dropna(inplace=True)
 return df

# Define function to load data into Postgres
def load_data(df):
    # Connect to Postgres
    conn = psycopg2.connect(host=pg_host, database=pg_database, user=pg_user, password=pg_password)
    # Create table if it doesn't exist
    with conn.cursor() as cursor:
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS telcom_data (
            customer_id INTEGER,
            subscription_id INTEGER,
            service_id INTEGER,
            start_date DATE,
            end_date DATE,
            price FLOAT
        )
        """)

def insert_data(dataframe):
    for index, row in dataframe.iterrows():
        query = f"INSERT INTO subscriptions (customer_id, subscription_id, service_id, start_date, end_date, price) VALUES ({row['customer_id']}, {row['subscription_id']}, {row['service_id']}, '{row['start_date'].date()}', '{row['end_date'].date()}', {row['price']})"
        cur.execute(query)
    conn.commit()
    conn.close()

# Call main function
def main():
  if __name__ == "__main__":
    main()